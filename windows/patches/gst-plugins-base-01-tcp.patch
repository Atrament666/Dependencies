diff --git a/configure.ac b/configure.ac
index d17b1dd..c5fba13 100644
--- a/configure.ac
+++ b/configure.ac
@@ -190,6 +190,7 @@ AM_CONDITIONAL(HAVE_SYS_SOCKET_H, test "x$HAVE_SYS_SOCKET_H" = "xyes")
 
 dnl used in gst-libs/gst/rtsp
 AC_CHECK_HEADERS([winsock2.h], HAVE_WINSOCK2_H=yes)
+AM_CONDITIONAL(HAVE_WINSOCK2_H, test "x$HAVE_WINSOCK2_H" = "xyes")
 if test "x$HAVE_WINSOCK2_H" = "xyes"; then
   WIN32_LIBS="-lws2_32"
   AC_SUBST(WIN32_LIBS)
@@ -396,7 +397,7 @@ if test "x$HAVE_LIBXML_HTML" != "xyes"; then
 fi
 
 dnl disable plug-ins that require sys/socket.h if it is not available
-if test "x$HAVE_SYS_SOCKET_H" != "xyes"; then
+if test "x$HAVE_SYS_SOCKET_H" != "xyes" -a "x$HAVE_WINSOCK2_H" != "xyes"; then
   AG_GST_DISABLE_PLUGIN(tcp)
 fi
 
diff --git a/gst/tcp/Makefile.am b/gst/tcp/Makefile.am
index c3ed8bd..b96504c 100644
--- a/gst/tcp/Makefile.am
+++ b/gst/tcp/Makefile.am
@@ -13,12 +13,20 @@ built_headers = gsttcp-enumtypes.h gsttcp-marshal.h
 
 BUILT_SOURCES = $(built_sources) $(built_headers)
 
+if HAVE_WINSOCK2_H
+multifd_sources =
+multifd_headers =
+else
+multifd_sources = gstmultifdsink.c gsttcpserversink.c
+multifd_headers = gstmultifdsink.h gsttcpserversink.h
+endif
+
 libgsttcp_la_SOURCES = \
 	gsttcpplugin.c \
 	gsttcp.c \
-	gstmultifdsink.c  \
+  $(multifd_sources)  \
 	gsttcpclientsrc.c gsttcpclientsink.c \
-	gsttcpserversrc.c gsttcpserversink.c
+  gsttcpserversrc.c
 
 nodist_libgsttcp_la_SOURCES = \
 	$(built_sources)
@@ -26,15 +34,15 @@ nodist_libgsttcp_la_SOURCES = \
 # remove ENABLE_NEW when dataprotocol is stable
 libgsttcp_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) $(GST_BASE_CFLAGS) $(GST_GDP_CFLAGS) $(GST_CFLAGS) -DGST_ENABLE_NEW
 libgsttcp_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
-libgsttcp_la_LIBADD = $(GST_BASE_LIBS) $(GST_GDP_LIBS) $(GST_LIBS)
+libgsttcp_la_LIBADD = $(GST_BASE_LIBS) $(GST_GDP_LIBS) $(GST_LIBS) $(WIN32_LIBS)
 libgsttcp_la_LIBTOOLFLAGS = --tag=disable-static
 
 noinst_HEADERS = \
   gsttcpplugin.h \
   gsttcp.h \
-  gstmultifdsink.h  \
+  $(multifd_headers)  \
   gsttcpclientsrc.h gsttcpclientsink.h \
-  gsttcpserversrc.h gsttcpserversink.h
+  gsttcpserversrc.h
 
 CLEANFILES = $(BUILT_SOURCES)
 
diff --git a/gst/tcp/gsttcp.c b/gst/tcp/gsttcp.c
index 5e8aae7..650bcf2 100644
--- a/gst/tcp/gsttcp.c
+++ b/gst/tcp/gsttcp.c
@@ -25,18 +25,26 @@
 #endif
 
 #include <sys/types.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <arpa/inet.h>
-#include <netdb.h>
 #include <unistd.h>
-#include <sys/ioctl.h>
+#include "gsttcp.h"
+
+#ifdef G_OS_WIN32
+# include <winsock2.h>
+# ifndef socklen_t
+#  define socklen_t int
+# endif
+#else
+# include <sys/socket.h>
+# include <arpa/inet.h>
+# include <netinet/in.h>
+# include <netdb.h>
+# include <sys/ioctl.h>
+#endif
 
 #ifdef HAVE_FIONREAD_IN_SYS_FILIO
 #include <sys/filio.h>
 #endif
 
-#include "gsttcp.h"
 #include <gst/gst-i18n-plugin.h>
 
 GST_DEBUG_CATEGORY_EXTERN (tcp_debug);
@@ -58,10 +66,20 @@ gst_tcp_host_to_ip (GstElement * element, const gchar * host)
   gchar *ip;
   struct in_addr addr;
 
+#ifdef G_OS_WIN32
+  long inaddress;
+#endif
+
   GST_DEBUG_OBJECT (element, "resolving host %s", host);
 
   /* first check if it already is an IP address */
+#ifdef G_OS_WIN32
+  inaddress = inet_addr(host);
+  addr.S_un.S_addr = inaddress;
+  if (inaddress != INADDR_NONE) {
+#else
   if (inet_aton (host, &addr)) {
+#endif
     ip = g_strdup (host);
     goto beach;
   }
@@ -129,7 +147,11 @@ gst_tcp_socket_read (GstElement * this, int socket, void *buf, size_t count,
 {
   ssize_t n;
   size_t bytes_read;
+#ifdef G_OS_WIN32
+  u_long num_to_read;
+#else
   int num_to_read;
+#endif
   int ret;
 
   bytes_read = 0;
@@ -145,7 +167,11 @@ gst_tcp_socket_read (GstElement * this, int socket, void *buf, size_t count,
     }
 
     /* ask how much is available for reading on the socket */
+#ifdef G_OS_WIN32
+    if (ioctlsocket (socket, FIONREAD, &num_to_read) != 0)
+#else
     if (ioctl (socket, FIONREAD, &num_to_read) < 0)
+#endif
       goto ioctl_error;
 
     if (num_to_read == 0)
@@ -155,7 +181,11 @@ gst_tcp_socket_read (GstElement * this, int socket, void *buf, size_t count,
 
     num_to_read = MIN (num_to_read, count - bytes_read);
 
+#ifdef G_OS_WIN32
+    n = recv (socket, (char*)(((guint8 *) buf) + bytes_read), num_to_read, 0);
+#else
     n = read (socket, ((guint8 *) buf) + bytes_read, num_to_read);
+#endif
 
     if (n < 0)
       goto read_error;
@@ -210,7 +240,11 @@ void
 gst_tcp_socket_close (GstPollFD * socket)
 {
   if (socket->fd >= 0) {
+#ifdef G_OS_WIN32
+    closesocket (socket->fd);
+#else
     close (socket->fd);
+#endif
     socket->fd = -1;
   }
 }
@@ -227,7 +261,11 @@ gst_tcp_read_buffer (GstElement * this, int socket, GstPoll * fdset,
 {
   int ret;
   ssize_t bytes_read;
+#ifdef G_OS_WIN32
+  u_long readsize;
+#else
   int readsize;
+#endif
 
   *buf = NULL;
 
@@ -241,7 +279,11 @@ gst_tcp_read_buffer (GstElement * this, int socket, GstPoll * fdset,
   }
 
   /* ask how much is available for reading on the socket */
-  if ((ret = ioctl (socket, FIONREAD, &readsize)) < 0)
+#ifdef G_OS_WIN32
+  if (ioctlsocket (socket, FIONREAD, &readsize) != 0)
+#else
+  if (ioctl (socket, FIONREAD, &readsize) < 0)
+#endif
     goto ioctl_error;
 
   if (readsize == 0)
@@ -251,7 +293,11 @@ gst_tcp_read_buffer (GstElement * this, int socket, GstPoll * fdset,
 
   *buf = gst_buffer_new_and_alloc (readsize);
 
+#ifdef G_OS_WIN32
+  bytes_read = recv (socket, (char*)GST_BUFFER_DATA (*buf), readsize, 0);
+#else
   bytes_read = read (socket, GST_BUFFER_DATA (*buf), readsize);
+#endif
 
   if (bytes_read < 0)
     goto read_error;
diff --git a/gst/tcp/gsttcpclientsink.c b/gst/tcp/gsttcpclientsink.c
index ca60578..169968b 100644
--- a/gst/tcp/gsttcpclientsink.c
+++ b/gst/tcp/gsttcpclientsink.c
@@ -42,6 +42,12 @@
 #include "gsttcpclientsink.h"
 #include <string.h>             /* memset */
 
+#ifdef G_OS_WIN32
+# ifndef ECONNREFUSED
+#  define ECONNREFUSED WSAECONNREFUSED
+# endif
+#endif
+
 /* TCPClientSink signals and args */
 enum
 {
diff --git a/gst/tcp/gsttcpclientsink.h b/gst/tcp/gsttcpclientsink.h
index 4399870..fbb4ed9 100644
--- a/gst/tcp/gsttcpclientsink.h
+++ b/gst/tcp/gsttcpclientsink.h
@@ -36,14 +36,22 @@ G_BEGIN_DECLS
 #include <string.h>
 #include <sys/time.h>
 #include <sys/types.h>
-#include <netinet/in.h>
-#include <netdb.h>
-#include <sys/socket.h>
-#include <sys/wait.h>
 #include <fcntl.h>
-#include <arpa/inet.h>
 #include "gsttcp.h"
 
+#ifdef G_OS_WIN32
+# include <winsock2.h>
+# ifndef socklen_t
+#  define socklen_t int
+# endif
+#else
+# include <sys/socket.h>
+# include <arpa/inet.h>
+# include <netinet/in.h>
+# include <netdb.h>
+# include <sys/wait.h>
+#endif
+
 #define GST_TYPE_TCP_CLIENT_SINK \
   (gst_tcp_client_sink_get_type())
 #define GST_TCP_CLIENT_SINK(obj) \
diff --git a/gst/tcp/gsttcpclientsrc.c b/gst/tcp/gsttcpclientsrc.c
index b8ac849..1827df1 100644
--- a/gst/tcp/gsttcpclientsrc.c
+++ b/gst/tcp/gsttcpclientsrc.c
@@ -42,9 +42,16 @@
 #include "gsttcpclientsrc.h"
 #include <string.h>             /* memset */
 #include <unistd.h>
-#include <arpa/inet.h>
 #include <fcntl.h>
 
+#ifndef G_OS_WIN32
+# include <arpa/inet.h>
+#else
+# ifndef ECONNREFUSED
+#  define ECONNREFUSED WSAECONNREFUSED
+# endif
+#endif
+
 
 GST_DEBUG_CATEGORY_STATIC (tcpclientsrc_debug);
 #define GST_CAT_DEFAULT tcpclientsrc_debug
@@ -322,7 +329,11 @@ gst_tcp_client_src_start (GstBaseSrc * bsrc)
   GST_DEBUG_OBJECT (src, "opening receiving client socket to %s:%d",
       src->host, src->port);
 
+#ifdef G_OS_WIN32
+  if ((src->sock_fd.fd = socket (AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)
+#else
   if ((src->sock_fd.fd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
+#endif
     goto no_socket;
 
   GST_DEBUG_OBJECT (src, "opened receiving client socket with fd %d",
@@ -373,7 +384,7 @@ name_resolv:
 connect_failed:
   {
     gst_tcp_client_src_stop (GST_BASE_SRC (src));
-    switch (errno) {
+    switch (WSAGetLastError()) {
       case ECONNREFUSED:
         GST_ELEMENT_ERROR (src, RESOURCE, OPEN_READ,
             (_("Connection to %s:%d refused."), src->host, src->port), (NULL));
@@ -381,7 +392,7 @@ connect_failed:
       default:
         GST_ELEMENT_ERROR (src, RESOURCE, OPEN_READ, (NULL),
             ("connect to %s:%d failed: %s", src->host, src->port,
-                g_strerror (errno)));
+                g_strerror (WSAGetLastError())));
         break;
     }
     return FALSE;
diff --git a/gst/tcp/gsttcpclientsrc.h b/gst/tcp/gsttcpclientsrc.h
index 24d31e8..8059684 100644
--- a/gst/tcp/gsttcpclientsrc.h
+++ b/gst/tcp/gsttcpclientsrc.h
@@ -27,14 +27,22 @@
 
 G_BEGIN_DECLS
 
-#include <netdb.h>                        /* sockaddr_in */
 #include <sys/types.h>
-#include <sys/socket.h>
-#include <netinet/in.h>                   /* sockaddr_in */
 #include <unistd.h>
 
 #include "gsttcp.h"
 
+#ifdef G_OS_WIN32
+# include <winsock2.h>
+# ifndef socklen_t
+#  define socklen_t int
+# endif
+#else
+# include <sys/socket.h>
+# include <netinet/in.h>
+# include <netdb.h>
+#endif
+
 #define GST_TYPE_TCP_CLIENT_SRC \
   (gst_tcp_client_src_get_type())
 #define GST_TCP_CLIENT_SRC(obj) \
diff --git a/gst/tcp/gsttcpplugin.c b/gst/tcp/gsttcpplugin.c
index bb2cf48..26cc202 100644
--- a/gst/tcp/gsttcpplugin.c
+++ b/gst/tcp/gsttcpplugin.c
@@ -41,14 +41,18 @@ plugin_init (GstPlugin * plugin)
   if (!gst_element_register (plugin, "tcpclientsrc", GST_RANK_NONE,
           GST_TYPE_TCP_CLIENT_SRC))
     return FALSE;
+#ifndef G_OS_WIN32
   if (!gst_element_register (plugin, "tcpserversink", GST_RANK_NONE,
           GST_TYPE_TCP_SERVER_SINK))
     return FALSE;
+#endif
   if (!gst_element_register (plugin, "tcpserversrc", GST_RANK_NONE,
           GST_TYPE_TCP_SERVER_SRC))
     return FALSE;
+#ifndef G_OS_WIN32
   if (!gst_element_register (plugin, "multifdsink", GST_RANK_NONE,
           GST_TYPE_MULTI_FD_SINK))
+#endif
     return FALSE;
 
   GST_DEBUG_CATEGORY_INIT (tcp_debug, "tcp", 0, "TCP calls");
diff --git a/gst/tcp/gsttcpserversink.c b/gst/tcp/gsttcpserversink.c
index c0cb95f..26415de 100644
--- a/gst/tcp/gsttcpserversink.c
+++ b/gst/tcp/gsttcpserversink.c
@@ -39,8 +39,6 @@
 #include <gst/gst-i18n-plugin.h>
 #include <string.h>             /* memset */
 
-#include <sys/ioctl.h>
-
 #ifdef HAVE_FIONREAD_IN_SYS_FILIO
 #include <sys/filio.h>
 #endif
@@ -49,6 +47,10 @@
 #include "gsttcpserversink.h"
 #include "gsttcp-marshal.h"
 
+#ifndef G_OS_WIN32
+# include <sys/ioctl.h>
+#endif
+
 #define TCP_BACKLOG             5
 
 GST_DEBUG_CATEGORY_STATIC (tcpserversink_debug);
@@ -149,7 +151,11 @@ gst_tcp_server_sink_handle_server_read (GstTCPServerSink * sink)
   /* new client */
   int client_sock_fd;
   struct sockaddr_in client_address;
+#ifdef G_OS_WIN32
+  int client_address_len;
+#else
   unsigned int client_address_len;
+#endif
 
   /* For some stupid reason, client_address and client_address_len has to be
    * zeroed */
@@ -273,6 +279,10 @@ gst_tcp_server_sink_init_send (GstMultiFdSink * parent)
   int ret;
   GstTCPServerSink *this = GST_TCP_SERVER_SINK (parent);
 
+#ifdef G_OS_WIN32
+  u_long ioctlarg;
+#endif
+
   /* create sending server socket */
   if ((this->server_sock.fd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
     goto no_socket;
@@ -306,7 +316,12 @@ gst_tcp_server_sink_init_send (GstMultiFdSink * parent)
     goto bind_failed;
 
   /* set the server socket to nonblocking */
+#ifdef G_OS_WIN32
+  ioctlarg = 1;
+  ioctlsocket (this->server_sock.fd, FIONBIO, &ioctlarg);
+#else
   fcntl (this->server_sock.fd, F_SETFL, O_NONBLOCK);
+#endif
 
   GST_DEBUG_OBJECT (this, "listening on server socket %d with queue of %d",
       this->server_sock.fd, TCP_BACKLOG);
diff --git a/gst/tcp/gsttcpserversink.h b/gst/tcp/gsttcpserversink.h
index ac8846d..8b21293 100644
--- a/gst/tcp/gsttcpserversink.h
+++ b/gst/tcp/gsttcpserversink.h
@@ -34,14 +34,22 @@ G_BEGIN_DECLS
 #include <string.h>
 #include <sys/time.h>
 #include <sys/types.h>
-#include <netinet/in.h>
-#include <netdb.h>
-#include <sys/socket.h>
-#include <sys/wait.h>
 #include <fcntl.h>
-#include <arpa/inet.h>
 #include "gstmultifdsink.h"
 
+#ifdef G_OS_WIN32
+# include <winsock2.h>
+# ifndef socklen_t
+#  define socklen_t int
+# endif
+#else
+# include <sys/socket.h>
+# include <arpa/inet.h>
+# include <netinet/in.h>
+# include <netdb.h>
+# include <sys/wait.h>
+#endif
+
 #define GST_TYPE_TCP_SERVER_SINK \
   (gst_tcp_server_sink_get_type())
 #define GST_TCP_SERVER_SINK(obj) \
diff --git a/gst/tcp/gsttcpserversrc.c b/gst/tcp/gsttcpserversrc.c
index c4244da..ff7f26a 100644
--- a/gst/tcp/gsttcpserversrc.c
+++ b/gst/tcp/gsttcpserversrc.c
@@ -42,9 +42,12 @@
 #include "gsttcpserversrc.h"
 #include <string.h>             /* memset */
 #include <unistd.h>
-#include <sys/ioctl.h>
 #include <fcntl.h>
 
+#ifndef G_OS_WIN32
+# include <sys/ioctl.h>
+#endif
+
 
 GST_DEBUG_CATEGORY_STATIC (tcpserversrc_debug);
 #define GST_CAT_DEFAULT tcpserversrc_debug
@@ -178,23 +181,32 @@ restart:
   } else {
     /* else wait on server socket for connections */
     gst_poll_fd_ctl_read (src->fdset, &src->server_sock_fd, TRUE);
-  }
 
-  /* no action (0) is an error too in our case */
-  if ((ret = gst_poll_wait (src->fdset, GST_CLOCK_TIME_NONE)) <= 0) {
-    if (ret == -1 && errno == EBUSY)
-      goto select_cancelled;
-    else
-      goto select_error;
+    /* no action (0) is an error too in our case */
+    if ((ret = gst_poll_wait (src->fdset, GST_CLOCK_TIME_NONE)) <= 0) {
+      if (ret == -1 && errno == EBUSY)
+        goto select_cancelled;
+      else
+        goto select_error;
+    }
   }
 
+
   /* if we have no client socket we can accept one now */
   if (src->client_sock_fd.fd < 0) {
     if (gst_poll_fd_can_read (src->fdset, &src->server_sock_fd)) {
+#ifdef G_OS_WIN32
+      src->client_sin_len = sizeof(src->client_sin);
+      if ((src->client_sock_fd.fd =
+              accept (src->server_sock_fd.fd,
+                  (struct sockaddr *) &src->client_sin,
+                  &src->client_sin_len)) == INVALID_SOCKET)
+#else
       if ((src->client_sock_fd.fd =
               accept (src->server_sock_fd.fd,
                   (struct sockaddr *) &src->client_sin,
                   &src->client_sin_len)) == -1)
+#endif
         goto accept_error;
 
       gst_poll_add_fd (src->fdset, &src->client_sock_fd);
@@ -279,7 +291,8 @@ select_cancelled:
 accept_error:
   {
     GST_ELEMENT_ERROR (src, RESOURCE, OPEN_READ, (NULL),
-        ("Could not accept client on server socket: %s", g_strerror (errno)));
+        ("Could not accept client on server socket: %s (%d)",
+         g_strerror (WSAGetLastError()), WSAGetLastError()));
     return GST_FLOW_ERROR;
   }
 gdp_cancelled:
@@ -356,20 +369,35 @@ gst_tcp_server_src_start (GstBaseSrc * bsrc)
   int ret;
   GstTCPServerSrc *src = GST_TCP_SERVER_SRC (bsrc);
 
+#ifdef G_OS_WIN32
+  BOOL sockopt;
+#else
+  int sockopt;
+#endif
+
   /* reset caps_received flag */
   src->caps_received = FALSE;
 
   /* create the server listener socket */
+#ifdef G_OS_WIN32
+  if ((src->server_sock_fd.fd = socket (AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)
+#else
   if ((src->server_sock_fd.fd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
+#endif
     goto socket_error;
 
   GST_DEBUG_OBJECT (src, "opened receiving server socket with fd %d",
       src->server_sock_fd.fd);
 
   /* make address reusable */
-  ret = 1;
-  if (setsockopt (src->server_sock_fd.fd, SOL_SOCKET, SO_REUSEADDR, &ret,
-          sizeof (int)) < 0)
+  sockopt = 1;
+#ifdef G_OS_WIN32
+  if (setsockopt (src->server_sock_fd.fd, SOL_SOCKET, SO_REUSEADDR, (char*)&sockopt,
+          sizeof (sockopt)) != 0)
+#else
+  if (setsockopt (src->server_sock_fd.fd, SOL_SOCKET, SO_REUSEADDR, &sockopt,
+          sizeof (sockopt)) < 0)
+#endif
     goto sock_opt;
 
   /* name the socket */
@@ -419,7 +447,7 @@ socket_error:
 sock_opt:
   {
     GST_ELEMENT_ERROR (src, RESOURCE, SETTINGS, (NULL),
-        ("Could not setsockopt: %s", g_strerror (errno)));
+        ("Could not setsockopt: %s", g_strerror (WSAGetLastError())));
     gst_tcp_socket_close (&src->server_sock_fd);
     return FALSE;
   }
@@ -431,10 +459,10 @@ host_error:
 bind_error:
   {
     gst_tcp_socket_close (&src->server_sock_fd);
-    switch (errno) {
+    switch (WSAGetLastError()) {
       default:
         GST_ELEMENT_ERROR (src, RESOURCE, OPEN_READ, (NULL),
-            ("bind failed: %s", g_strerror (errno)));
+            ("bind failed: %s", g_strerror (WSAGetLastError())));
         break;
     }
     return FALSE;
@@ -443,7 +471,7 @@ listen_error:
   {
     gst_tcp_socket_close (&src->server_sock_fd);
     GST_ELEMENT_ERROR (src, RESOURCE, OPEN_READ, (NULL),
-        ("Could not listen on server socket: %s", g_strerror (errno)));
+        ("Could not listen on server socket: %s", g_strerror (WSAGetLastError())));
     return FALSE;
   }
 socket_pair:
diff --git a/gst/tcp/gsttcpserversrc.h b/gst/tcp/gsttcpserversrc.h
index 22c7afe..93cf865 100644
--- a/gst/tcp/gsttcpserversrc.h
+++ b/gst/tcp/gsttcpserversrc.h
@@ -30,12 +30,20 @@ G_END_DECLS
 #include <errno.h>
 #include <string.h>
 #include <sys/types.h>
-#include <netdb.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <arpa/inet.h>
 #include "gsttcp.h"
 
+#ifdef G_OS_WIN32
+# include <winsock2.h>
+# ifndef socklen_t
+#  define socklen_t int
+# endif
+#else
+# include <sys/socket.h>
+# include <arpa/inet.h>
+# include <netinet/in.h>
+# include <netdb.h>
+#endif
+
 #include <fcntl.h>
 
 #define GST_TYPE_TCP_SERVER_SRC \
